<!-- TODO: hier "Home Page" implementieren  ("/") -->
<!-- s. Boilerplate code unten eventuell löschen -->


<div class="index-page-content">
  {% for product in collections.main-products.products %}
  <div class="index-page-product">
    <a href="{{ product.url }}">
      <div class="index-page-product__content">
        <h1> {{ product.title | upcase }} </h1>
        <div class="index-page-product__description">
          {{ product.description }}
        </div>
        <div class="index-page-product__cta">
          <div> Shop now </div>
          <div class="arrow-image-container">
            <img src="{{ 'arrow.svg' | asset_url }}" alt="arrow-image">
          </div>
        </div>
      </div>
      {% assign images = product.media | where: "media_type", "image" %}
      {% assign mainImageSrc = images[0].image.src | product_img_url: '1000x' %}
      <div class="index-page-product-image-container">
        <div class="index-page-product-image-background" data-lazy-src="{{ mainImageSrc }}"> </div>
      </div>
      
    </a>
  </div>
{% endfor %}

</div>







<style>
  .brand-name {
    position: absolute;
    font-size: 5rem;
    top: 25vh;
    transform: translateX(calc(50vw - 50%));    /* MARK: best practice um ein position: absolute element zu centrieren? */
  }
</style>



<!-- product scroll script -->
<script>
  const productSections = document.querySelectorAll(".index-page-product")

  const productSectionOptions = {
    // root: null   --> viewport (default)
    root: null,
    threshold: 0,
    rootMargin: "0px 0px 0px 0px"    // zb "-150px" -> s. wann text eingeblendet werden soll
  }


  const productSectionObserver = new IntersectionObserver(
    (entries, observer) => {
      entries.forEach((entry) => {

        const product = entry.target
        const bgImgContainer = entry.target.children[0].children[1]   // class="index-page-product-image-background
        const imgBg = bgImgContainer.children[0]

        // lazyloading der images: https://www.youtube.com/watch?v=aUjBvuUdkhgr
        if (entry.isIntersecting) {
          console.log("is Interseting");
          preloadImage(imgBg)
          // observer.unobserve(entry.target) -> wann aufrufen?!
        } 
        else if (!entry.isIntersecting) {
          // observer.unobserve(entry.target) -> wann aufrufen?!
        }
      })
    },productSectionOptions)
  


  function preloadImage(imgDiv) {
    const bgImgPath = imgDiv.dataset.lazySrc
    if (!bgImgPath) {
      // TODO: placeholder product image, mit der message, dass das original nicht laden konnte
      return 
    }
    imgDiv.style.backgroundImage = `linear-gradient(150deg,rgba(0,0,0,.5) 10%,transparent 65%) ,url(${bgImgPath})`
  }


  productSections.forEach(
    (product) => {
      productSectionObserver.observe(product)
    }
  )
</script>


<!-- TODO: permance script tag vs js file vs wie viele script tags: https://stackoverflow.com/questions/4396849/does-the-script-tag-position-in-html-affects-performance-of-the-webpage -->
<!-- TODO: performance: transforms besser als position properties!!! - eventuell mehr bugs  -->
<!-- s. https://github.com/janpaepke/ScrollMagic/issues/414 -->
<!-- Header Scroll script -->
<script>
  const brandName = document.querySelector(".brand-name")
  const header = document.querySelector("header")

  const controller = new ScrollMagic.Controller()
  const headerTl = new TimelineMax()
  headerTl.to(".brand-name", 1, {fontSize: 20, ease: Power0.easeNone })
  headerTl.to(".brand-name", 1, {top: 0, ease: Power0.easeNone}, 0)
  
  const headerTitleScene = new ScrollMagic.Scene({
    //triggerElement: "",      muss hier nicht definiert sein, da ja von anfang an animiert werden soll
    triggerHook: 0,
    duration: "50%"
  })
    .addTo(controller)
    // .addIndicators()
    .setTween(headerTl)



  //---- product-image/product (fade&scale)Animation ----
  // TODO: s. lazyloading via INtersection Observer -> alles in einem script tag!!
  const productContents = document.querySelectorAll(".index-page-product__content")
  const productBackgrounds = document.querySelectorAll(".index-page-product-image-background")

  productSections.forEach((product) => {
    // TODO: children/indexe refactoren besser/übersichtlicher? s. jQuery -> find("index-page-product-image-background")
    const productContent =  product.children[0].children[0]
    const productBgContainer = product.children[0].children[1]
    const productImgBg = productBgContainer.children[0]
    productAnimation(productContent, productImgBg)
  })


  // ---- TODO: HTML STRUKTUR MIT BACKGROUND IMAGE NOCHMAL ÄNDERN: 
  // STATTDESSEN: img-tag und img-container -> dann img-tag (children von img-container) mit scale vergrößern (overflow-hidden) 
  function productAnimation(content, background) {
    const productSlideTl = new TimelineMax()
    productSlideTl.to(content, 0.6, {y: -140, autoAlpha: 1, ease: Power0.easeNone}, 0)
    productSlideTl.from(background, 1, {scale: 1.3, ease: Power0.easeNone}, 0)        // WICHTIG: .from tween statt  .to!!! -> sonst wird background-image runter gescalet/kleiner, aber füllt dann nicht mehr den container aus

    let productScene = new ScrollMagic.Scene({
      triggerElement: background,
      triggerHook: 0.9,                 // s. magin: 90vh 
      duration: "180%"
    })
      .setTween(productSlideTl)
      .addTo(controller)
      .addIndicators({
        name: "productTrigger",
        colorStart: "green",
        colorEnd: "red"
      })

  }




</script>












<!-- {% for product in collections.main.products limit:4 %}

  <div>
    <a href="{{ product.url | within: collection }}"> {{ product.title }}</a>
    {{ product.price | money }}
    {% unless product.available %}<br><strong>sold out</strong>{% endunless %}
    <a href="{{ product.url | within: collection }}">
      <img src="{{ product.featured_image.src | img_url: 'large' }}" alt="{{ product.featured_image.alt | escape }}">
    </a>
  </div>
{% endfor %} -->

